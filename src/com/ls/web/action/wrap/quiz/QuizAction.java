/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ls.web.action.wrap.quiz;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.ls.ben.dao.info.partinfo.PlayerPropGroupDao;
import com.ls.ben.vo.info.partinfo.PlayerPropGroupVO;
import com.ls.ben.vo.info.quiz.QuizVO;
import com.ls.model.user.RoleEntity;
import com.ls.pub.constant.StatisticsType;
import com.ls.pub.util.MoneyUtil;
import com.ls.web.service.Quiz.QuizService;
import com.ls.web.service.goods.GoodsService;
import com.ls.web.service.log.LogService;
import com.ls.web.service.player.EconomyService;
import com.ls.web.service.player.RoleService;
import com.ls.web.service.rank.RankService;
import com.lw.service.gamesystemstatistics.GameSystemStatisticsService;

/** 
 * MyEclipse Struts
 * Creation date: 09-04-2008
 * 
 * XDoclet definition:
 * @struts.action parameter="cmd" validate="true"
 * @struts.action-forward name="answer_over" path="/jsp/wrapinfo/quiz/answer_over.jsp"
 */
public class QuizAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	//回答问题处理
	public ActionForward n1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String quiz_id = request.getParameter("quiz_id");
		String player_answer = request.getParameter("player_answer");
		String w_type = request.getParameter("w_type");
		String pg_pk = request.getParameter("pg_pk");
		if( quiz_id==null )
		{
			return null ;
		}
		
		RoleService roleService = new RoleService();
		RoleEntity roleInfo = roleService.getRoleInfoBySession(request.getSession());
		
		int p_pk = roleInfo.getBasicInfo().getPPk();
		StringBuffer resultWml = new StringBuffer();
		
		QuizService quizService = new QuizService();
		EconomyService economyServcie = new EconomyService();
		
		if(roleInfo.getBasicInfo().isPlayerExpFull() && roleInfo.getBasicInfo().isPlayerHaveTransfer()){
			resultWml.append("您需要转职后才能使用该道具");
			request.setAttribute("resultWml", resultWml.toString());
			request.setAttribute("w_type", w_type);
			return mapping.findForward("answer_over");
		}
		
		QuizVO quiz = quizService.getAwardById(Integer.parseInt(quiz_id));
		// 判断是否可以放下题目所发道具或装备
		String goodstr = quiz.getAwardGoods();
		if ( goodstr != null && !goodstr.equals("") && !goodstr.equals("null")) {
			String[] goodStrings = goodstr.split(";");
			if ( roleInfo.getBasicInfo().getWrapSpare() < goodStrings.length) {
				resultWml.append("您的包裹空间不够!");
				request.setAttribute("resultWml", resultWml.toString());
				request.setAttribute("w_type", w_type);
				return mapping.findForward("answer_over");
			}
		}
		
		// 标志,道具是否需要删除
		boolean flag = false;
		if( Integer.parseInt(player_answer)==quiz.getQuziRightAnswer() )
		{
			if( quiz.getAwardMoney() > 0 )
			{
				flag = true;
				economyServcie.addMoney(p_pk, (int)quiz.getAwardMoney());
				resultWml.append("您获得"+MoneyUtil.changeCopperToStr((int)quiz.getAwardMoney())+"<br/>");
				//执行统计
				GameSystemStatisticsService gsss = new GameSystemStatisticsService();
				gsss.addPropNum(6, StatisticsType.MONEY, (int)quiz.getAwardMoney(), StatisticsType.DEDAO, StatisticsType.XITONG,p_pk);
				
			}
			if( quiz.getAwardExperience() > 0 )
			{
				
				int cur_exp = Integer.parseInt(roleInfo.getBasicInfo().getCurExp());
				
				if ( (cur_exp+(int)quiz.getAwardExperience()) >= 560429425) {
					resultWml.append("您已经到达最高级,不能增加经验了!<br/>");					
									
				} else {
					flag = true;
					resultWml.append("您获得了:经验+"+(int)quiz.getAwardExperience() + "点<br/>");
    				//给玩家增加经验
    				roleInfo.getBasicInfo().updateCurExp( (cur_exp+(int)quiz.getAwardExperience())+"");
    				//监控
    				LogService logService = new LogService();
    				logService.recordExpLog(p_pk, roleInfo.getBasicInfo().getName(), cur_exp+"", quiz.getAwardExperience()+"", "答题");				    		
				}
			}
			if ( quiz.getAwardGoods() != null && !quiz.getAwardGoods().equals("") && !quiz.getAwardGoods().equals("null")) {
				flag = true;
				resultWml.append("您获得了:");
				String[] awardGoods = quiz.getAwardGoods().split(";");
				for( int i=0;i<awardGoods.length;i++) {
					String goods = awardGoods[i];
					GoodsService goodsService = new GoodsService();
					goodsService.putGoodsToWrap(p_pk, Integer.parseInt(goods.split("-")[1])
							,Integer.parseInt(goods.split("-")[0]), Integer.parseInt(goods.split("-")[2]));
					
					resultWml.append(goodsService.getGoodsName(Integer.parseInt(goods.split("-")[1]), Integer.parseInt(goods.split("-")[0]))
							).append("×").append(goods.split("-")[2]).append(",");
				}
				resultWml.deleteCharAt(resultWml.length()-1);				
			}
			
			if (flag) {
    			//答题后删除使用道具
    			GoodsService goodsService = new GoodsService();
    			PlayerPropGroupDao propGroupDao = new PlayerPropGroupDao();
    			PlayerPropGroupVO propGroup = propGroupDao.getByPgPk(Integer.parseInt(pg_pk));
    			if(propGroup.getPropName().indexOf("还丹")==-1){
    				//统计需要
    				new RankService().updateAdd(p_pk, "ans", 1);
    			}
    			goodsService.removeProps(propGroup, 1);
			}
			
		}
		else
		{
			resultWml.append("回答错误，继续努力。");
			//答题后删除使用道具
			GoodsService goodsService = new GoodsService();
			PlayerPropGroupDao propGroupDao = new PlayerPropGroupDao();
			PlayerPropGroupVO propGroup = propGroupDao.getByPgPk(Integer.parseInt(pg_pk));
			goodsService.removeProps(propGroup, 1);
		}
		
		
		
		request.setAttribute("resultWml", resultWml.toString());
		request.setAttribute("w_type", w_type);
		return mapping.findForward("answer_over");
	}
}